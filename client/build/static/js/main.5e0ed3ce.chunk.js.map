{"version":3,"sources":["components/Square.js","components/Board.js","util/UserContect.js","util/JudgeWinner.js","components/Game.js","components/Chat.js","App.js","index.js"],"names":["Square","click","val","row","col","className","onClick","Board","square","len","renderSquare","i","j","squareArr","Array","fill","map","_","item","idx","generateSquare","UserContext","createContext","JudgeWinner","squares","chess","count","dfsVertical","dfsHorizon","dfsLeftTop","dfsLeftBottom","Game","forwardRef","ref","socket","username","room","full","useContext","setIsLogin","useState","stepNum","xIsNext","history","curX","curY","isWin","winner","stage","setStage","useEffect","on","data","console","log","s","jumpTo","a","message","emit","handleClick","slice","current","length","newSquare","JSON","parse","stringify","calculateWinner","concat","moves","step","dest","getStatus","meg","Chat","curMessage","setCurMessage","messageList","setMessageList","sendMessage","messageData","name","time","Date","now","getHours","getMinutes","list","sendEnter","e","keyCode","id","type","placeholder","onChange","target","value","onKeyUp","io","App","setUsername","setRoom","isLogin","isFull","setIsFull","joinRoom","user","Provider","style","display","justifyContent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e0ed3ce.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Board的子组件，每个square组件代表一个方块\n */\nexport default function Square({ click, val, row, col }) {\n  //this.state 应该被视为一个组件的私有属性\n  //每次使用 setCount 时，都会重新执行 Component 的render函数, 重新渲染 Square 组件，所以绝对不能在 Component 函数中同步调用 setCount，这样会导致无限重绘，页面假死。\n  return (\n    <button className=\"square\" onClick={click}>\n      {val}\n    </button>\n  );\n}\n","import React from \"react\";\nimport Square from \"./Square\";\n\n/**\n * 父组件123\n * 当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。\n */\nconst Board = ({ square, onClick, len }) => {\n  //渲染Square方块组件的函数\n  const renderSquare = (i, j) => {\n    return (\n      <Square\n        //TODO\n        val={square[i][j]}\n        click={() => onClick(i, j)}\n        row={i}\n        col={j}\n        key={i * len + j}\n      />\n    );\n  };\n\n  const generateSquare = () => {\n    const squareArr = Array(len)\n      .fill(0)\n      .map((_) => new Array(len).fill(0));\n    // console.log(`len: ${len}`);\n    //二维数组重复引用问题\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len; j++) {\n        squareArr[i][j] = i * len + j;\n      }\n    }\n    // console.log(squareArr);\n    const colItems = (row) => {\n      return squareArr[0].map((item, idx) => renderSquare(row, idx));\n    };\n    const square = squareArr.map((item, idx) => {\n      return (\n        <div className=\"board-row\" key={item}>\n          {colItems(idx)}\n        </div>\n      );\n    });\n    return square;\n  };\n\n  //组件内不能声明变量，只能在函数体中声明,命令式编程\n\n  return generateSquare();\n};\n\nexport default Board;\n","import { createContext } from \"react\";\n\nexport const UserContext = createContext();\n","const dfsHorizon = (squares, i, j, chess) => {\n  let count = 0;\n  let idx = j;\n  while (i >= 0 && i < 15 && j - 1 >= 0 && squares[i][j - 1] === chess) {\n    count++;\n    j--;\n  }\n  while (i >= 0 && i < 15 && j + 1 < 15 && squares[i][idx + 1] === chess) {\n    count++;\n    idx++;\n  }\n  return count;\n};\n\nconst dfsVertical = (squares, i, j, chess) => {\n  let count = 0;\n  let idx = i;\n  while (j >= 0 && j < 15 && i - 1 >= 0 && squares[i - 1][j] === chess) {\n    count++;\n    i--;\n  }\n  while (j >= 0 && j < 15 && idx + 1 < 15 && squares[idx + 1][j] === chess) {\n    count++;\n    idx++;\n  }\n  return count;\n};\n//TODO 不加越界条件会跑出去\nconst dfsLeftTop = (squares, i, j, chess) => {\n  let count = 0;\n  // console.log(`dfsLeftTop i: ${i}`);\n  // console.log(`dfsLeftTop j: ${j}`);\n  let row = i;\n  let col = j;\n  while (row + 1 < 15 && col + 1 < 15 && squares[row + 1][col + 1] === chess) {\n    row++;\n    col++;\n    count++;\n  }\n  while (i - 1 >= 0 && j - 1 >= 0 && squares[i - 1][j - 1] === chess) {\n    i--;\n    j--;\n    count++;\n  }\n  // console.log(`count:${count}`);\n  return count;\n};\n\nconst dfsLeftBottom = (squares, i, j, chess) => {\n  let count = 0;\n  // console.log(`dfsLeftBottom i: ${i}`);\n  // console.log(`dfsLeftBottom j: ${j}`);\n  let row = i;\n  let col = j;\n  while (row - 1 >= 0 && col + 1 < 15 && squares[row - 1][col + 1] === chess) {\n    row--;\n    col++;\n    count++;\n  }\n  while (i + 1 < 15 && j - 1 >= 0 && squares[i + 1][j - 1] === chess) {\n    i++;\n    j--;\n    count++;\n  }\n  return count;\n};\n\nconst JudgeWinner = (squares, i, j, chess) => {\n  return (\n    dfsVertical(squares, i, j, chess) + 1 >= 5 ||\n    dfsHorizon(squares, i, j, chess) + 1 >= 5 ||\n    dfsLeftTop(squares, i, j, chess) + 1 >= 5 ||\n    dfsLeftBottom(squares, i, j, chess) + 1 >= 5\n  );\n};\n\nexport default JudgeWinner;\n","// import \"../App.css\";\nimport React, { useState, useContext, useEffect, forwardRef } from \"react\";\nimport Board from \"./Board\";\nimport { UserContext } from \"../util/UserContect\";\nimport JudgeWinner from \"../util/JudgeWinner\";\n\n/**\n * 爷爷组件\n */\nconst Game = forwardRef(({ socket, username, room, full }, ref) => {\n  const [isLogin, setIsLogin] = useContext(UserContext);\n  const [stage, setStage] = useState({\n    stepNum: 0,\n    xIsNext: true,\n    history: [\n      {\n        username: null,\n        square: Array(15)\n          .fill(null)\n          .map((_) => new Array(15).fill(null)),\n      },\n    ],\n    curX: 0,\n    curY: 0,\n    isWin: false,\n    winner: null,\n    room: room,\n  });\n  // const userList = useRef([]);\n\n  useEffect(() => {\n    socket.on(\"receive_chess\", (data) => {\n      console.log(data);\n      setStage((s) => ({\n        ...s,\n        ...data,\n      }));\n    });\n  }, [socket]);\n\n  /**\n   * 点击跳转到第idx步\n   * @param {*} idx 要跳转到的步数\n   */\n  const jumpTo = async (idx) => {\n    if (full) {\n      return;\n    }\n    // console.log(`idx:${idx}`);\n    const message = {\n      ...stage,\n      stepNum: idx,\n      xIsNext: idx % 2 === 0,\n      isWin: false,\n      winner: null,\n    };\n    console.log(message);\n    await socket.emit(\"retrieve_chess\", message);\n\n    setStage({\n      ...stage,\n      ...message,\n    });\n  };\n\n  /**\n   * 下子后执行的函数\n   *\n   * @param {*} i 下子的位置\n   * @returns     更新state中的stepNum, xIsNext, history\n   */\n  //TODO i,j\n  const handleClick = async (i, j) => {\n    if (full) {\n      return;\n    }\n    //获取当前状态square数组的copy（避免直接操作this.state）\n    let history = stage.history.slice(0, stage.stepNum + 1);\n    let current = history[history.length - 1];\n    console.log(stage.history);\n    if (current.username === username) {\n      return;\n    }\n    const newSquare = JSON.parse(JSON.stringify(current.square));\n    if (calculateWinner(newSquare, i, j) === true || newSquare[i][j]) {\n      return;\n    }\n\n    newSquare[i][j] = stage.xIsNext ? \"X\" : \"O\";\n\n    const message = {\n      ...stage,\n      //这里是history.length是更新渲染前的长度，所以不用  history.length - 1\n      stepNum: history.length,\n      xIsNext: !stage.xIsNext,\n      //history是放着历次square对象的数组，当点击jumpTo后，会删除之前直到这一步的history，这里不能写this.state.history\n      history: history.concat([\n        {\n          square: newSquare,\n          username: username,\n        },\n      ]),\n      curX: i,\n      curY: j,\n      room: room,\n    };\n    await socket.emit(\"set_chess\", message);\n\n    setStage({\n      ...stage,\n      ...message,\n    });\n  };\n\n  /**\n   * 判断在i， j坐标下棋后，是否会有胜利者\n   * 是基于某一方在当前位置下能否胜利，如果X胜利了，O可能还会继续判断能否胜利\n   * @param {*} squares  当前棋盘数组\n   * @returns\n   */\n  //TODO\n  const calculateWinner = (squares, i, j) => {\n    if (stage.isWin === true) {\n      return true;\n    }\n\n    // 不能用squares[i][j]判断当前的棋子，这是还是null\n    let chess = stage.xIsNext ? \"X\" : \"O\";\n\n    //判断胜利之后还要把棋子加上!!!!\n    if (JudgeWinner(squares, i, j, chess)) {\n      let history = stage.history.slice(0, stage.stepNum + 1);\n      squares[i][j] = chess;\n      const message = {\n        ...stage,\n        isWin: true,\n        winner: chess,\n        stepNum: history.length,\n        xIsNext: !stage.xIsNext,\n        history: history.concat([\n          {\n            square: squares,\n          },\n        ]),\n        curX: i,\n        curY: j,\n      };\n      socket.emit(\"win_chess\", message);\n\n      setStage({\n        ...stage,\n        ...message,\n      });\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * 判断当前下子的是谁\n   * @param {*} current history中当前的对象\n   * @returns\n   */\n  //TODO\n  const getStatus = (current) => {\n    // console.log(current.square);\n    // console.log(`current history = ${current.square}`);\n    //TODO\n    const winner = stage.winner;\n    let status;\n    if (winner) {\n      status = `Winner is ${winner}`;\n    } else {\n      status = `Next player: ${stage.xIsNext ? \"X\" : \"O\"}`;\n    }\n    return status;\n  };\n\n  let history = stage.history;\n  //current是当前棋盘对象 = {square: [, , , , , ,\"X\", , ,]}\n  let current = history[stage.stepNum];\n  // console.log(history.length);\n\n  //history是放着历次square对象的数组\n  let moves = history.map((step, idx) => {\n    // console.log(\"move button\");\n    const dest = idx ? `Go to move #${idx}` : \"Go to game start\";\n    return (\n      <li key={idx}>\n        <button\n          onClick={() => {\n            jumpTo(idx);\n          }}\n        >\n          {dest}\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          square={current.square}\n          onClick={(i, j) => handleClick(i, j)}\n          len={15}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>Username:{username}</div>\n        <div>ChessRoom:{room}</div>\n        <div>{getStatus(current)}</div>\n        <div>{`---Location: \\n row:${stage.curX} \\n col:${stage.curY}----`}</div>\n        <button\n          onClick={() => {\n            setIsLogin(() => false);\n            const meg = {\n              username: username,\n              room: room,\n            };\n            socket.emit(\"leave\", meg);\n          }}\n        >\n          Log out\n        </button>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n});\n\nexport default Game;\n","import React, { useState, useEffect } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [curMessage, setCurMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  //要用异步！！\n  const sendMessage = async () => {\n    if (curMessage !== \"\") {\n      const messageData = {\n        name: username,\n        room: room,\n        message: curMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurMessage(\"\");\n    }\n  };\n\n  const sendEnter = async (e) => {\n    if (e.keyCode === 13) {\n      sendMessage();\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      console.log(data);\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Chess Room</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((item, idx) => {\n            return (\n              <div\n                className=\"message\"\n                key={idx}\n                id={username === item.name ? \"you\" : \"other\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{item.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{item.time}</p>\n                    <p id=\"author\">{item.name}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          placeholder=\"Hey...\"\n          onChange={(e) => {\n            setCurMessage(e.target.value);\n          }}\n          onKeyUp={sendEnter}\n          value={curMessage}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import Game from \"./components/Game\";\nimport Chat from \"./components/Chat\";\nimport io from \"socket.io-client\";\nimport React, { useState, useRef } from \"react\";\nimport { UserContext } from \"./util/UserContect\";\nimport \"./App.css\";\n\nconst DEV_SOCKET = \"http://localhost:5000/\";\nconst PORD_SOCKET = \"https://tic-socket.herokuapp.com/\";\nconst socket = io(PORD_SOCKET);\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(false);\n  const [isFull, setIsFull] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", {\n        user: username,\n        room: room,\n      });\n      // socket.on(\"getUserList\", (data) => {\n      //   userList.current = data;\n      //   console.log(userList.current);\n      // });\n\n      socket.on(\"full\", (data) => {\n        if (data) {\n          setIsFull(true);\n          // setIsLogin(false);\n          // alert(\"the room is full\");\n          // return;\n        }\n      });\n\n      // console.log(userList.current);\n      // if (userList.current.length > 2) {\n      //   alert(\"the room is full\");\n      //   return;\n      // }\n\n      setIsLogin(true);\n    }\n  };\n  const confirmEnter = (e) => {\n    if (e.keyCode === 13) {\n      joinRoom();\n    }\n  };\n  return (\n    <div className=\"App\">\n      <UserContext.Provider value={[isLogin, setIsLogin]}>\n        {!isLogin ? (\n          <div className=\"joinChatContainer\">\n            <h3>Join a Chess</h3>\n            <input\n              type=\"text\"\n              placeholder=\"John\"\n              onChange={(e) => {\n                setUsername(e.target.value);\n              }}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Room ID\"\n              onChange={(e) => {\n                setRoom(e.target.value);\n              }}\n              onKeyUp={confirmEnter}\n            />\n            {/* Join a room */}\n            <button onClick={joinRoom}>Join a room</button>\n          </div>\n        ) : (\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <Game\n              socket={socket}\n              username={username}\n              room={room}\n              full={isFull}\n            />\n            <Chat socket={socket} username={username} room={room} />\n          </div>\n        )}\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}